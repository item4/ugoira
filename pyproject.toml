[tool.black]
line-length = 80
preview = true


[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-async
    "ASYNC",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-bugbear
    "B",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-type-checking
    "TCH",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # Pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
]
ignore = [
    # flake8-bandit
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    # flake8-pytest-style
    "PT011",  # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    # tryceratops
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY301",  # Abstract raise to an inner function
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # flake8-bandit
    "S101",  # Use of assert detected
    # Pylint
    "PLR0913",  # Too many arguments in function definition
    "PLR2004",  # Magic value used in comparison, consider replacing `{}` with a constant variable
]

[tool.ruff.lint.isort]
force-single-line = true  # 한 줄 당 1개의 import 문
order-by-type = false  # 모두 대문자인 요소를 우선정렬하는 부분 비활성화
case-sensitive = true  # 대소문자 구분을 켜야 대문자 요소가 우선정렬됨
known-first-party = ["ugoira"]
section-order = ["future", "standard-library", "third-party", "tests", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
tests = ["tests"]

[tool.poetry]
name = "ugoira"
version = "0.10.0"
description = "ugoira for download pixiv ugoira images"
authors = ["Kim, Jin Su <item4@localhost.com>"]
license = "MIT"
readme = "README.rst"
repository = "https://github.com/item4/ugoira"
documentation = "https://ugoira.readthedocs.io"
packages = [
    { include = "ugoira" },
]

[tool.poetry.group.main.dependencies]
python = ">=3.12"
click = "^8.1.7"
fake-useragent = "^1.5.1"
httpx = "^0.27.2"
pillow = "^11.0.0"

[tool.poetry.group.dev.dependencies]
apng = "^0.3.4"
black = "^24.10.0"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-httpx = "^0.32.0"
ruff = "^0.7.0"
sphinx = "^8.1.3"

[tool.poetry.scripts]
ugoira = "ugoira.cli:ugoira"

[tool.poetry.dependencies]
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
